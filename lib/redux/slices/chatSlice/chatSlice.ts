/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'

/* Instruments */
import { chatAsync } from './thunks'
import { ChatStoredObject } from '@/lib/util/assetTypes';

const initialState: ChatSliceState = {
  value: [],
  stored: null,
  storedMode: "",
  status: 'idle'
}

export const chatSlice = createSlice({
  name: 'chat',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    receiveChat: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value.push(action.payload);
    },
    setStored: (state, action) => {
      let storedObject: ChatStoredObject = action.payload;
      state.stored = storedObject;
      if(storedObject == null){
        state.storedMode = "";
      }
    },
    setStoredMode: (state, action) => {
      state.storedMode = action.payload;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(chatAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(chatAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.value.push(action.payload);
      })
  },
})

/* Types */
export interface ChatSliceState {
  value: Array<any>,
  stored: ChatStoredObject | null,
  storedMode: any,
  status: 'idle' | 'loading' | 'failed'
}
