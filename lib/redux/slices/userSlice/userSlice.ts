/* Core */
import { createSlice } from '@reduxjs/toolkit';
import { decodeJWT } from '@/lib/util/util';

/* Instruments */
import { loginAsync, registerAsync } from './thunks';
import { UserObject } from '@/lib/util/assetTypes';

const initialState: UserSliceState = {
  list: [],
  edit: null,
  username: null,
  token: null,
  role: null,
  id: null,
  dark: true,
  status: 'idle'
}

export const userSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logout: (state, action) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.username = null;
      state.token = null;
      localStorage.clear();
    },
    setDark: (state, action) => {
      state.dark = action.payload;
    },
    setEdit: (state, action) => {
      state.edit = action.payload;
    },
    setList: (state, action) => {
      state.list = action.payload;
    },
    setToken: (state, action) => {
      state.token = action.payload;
      let jwtPayload: any = decodeJWT(action.payload);
      if(jwtPayload){
        if(jwtPayload.role){
          state.role = jwtPayload.role;
        }
        if(jwtPayload.username){
          state.username = jwtPayload.username;
        }
        if(jwtPayload.id){
          state.id = jwtPayload.id;
        }
      }
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
        .addCase(registerAsync.pending, (state) => {
            state.status = 'loading'
        })
        .addCase(registerAsync.fulfilled, (state, action) => {
            state.status = 'idle';
        })
    builder
        .addCase(loginAsync.pending, (state) => {
            state.status = 'loading';
        })
        .addCase(loginAsync.fulfilled, (state, action) => {
            state.token = action.payload.token;
            localStorage.setItem("ertoken", action.payload.token);
            let jwtPayload: any = decodeJWT(action.payload.token);
            if(jwtPayload){
              if(jwtPayload.role){
                state.role = jwtPayload.role;
              }
              if(jwtPayload.username){
                state.username = jwtPayload.username;
              }
              if(jwtPayload.id){
                state.id = jwtPayload.id;
              }
            }
            state.status = 'idle';
        })
  },
})

/* Types */
export interface UserSliceState {
  list: Array<UserObject>,
  edit: UserObject | null,
  username: string | null,
  token: string | null,
  role: string | null,
  id: string | null,
  dark: boolean,
  status: 'idle' | 'loading' | 'failed'
}
