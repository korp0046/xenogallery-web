/* Core */
import { getDefaultScene } from '@/lib/gamedata/defaultScenes';
import { createSlice } from '@reduxjs/toolkit';

/* Instruments */
import { getGameAsync, upsertGameAsync } from './thunks';
import { TrackType } from '@/lib/util/assetTypes';
import _ from 'lodash';

let tempGameState = null;

const initialState: GameSlice = {
  gameState: null,
  autoSave: true,
  lastSave: 0,
  status: 'idle'
}

export const gameSlice = createSlice({
  name: 'game',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setAutoSave: (state, action) => {
      state.autoSave = action.payload;
    },
    setLastSave: (state, action) => {
      state.lastSave = action.payload;
    },
    leaveGame: (state, action) => {
      state.gameState = null;
    },
    receiveGame: (state, action) => {
      state.gameState = action.payload;
      if(state.gameState){
        state.gameState.meta['dirty'] = true;
      }
    },
    updateGame: (state, action) => {
      if(state.gameState){
        tempGameState = _.cloneDeep(action.payload);
        setTimeout(()=>console.log(action.payload),10);
      }
      state.gameState = action.payload;
      if(state.gameState){
        state.gameState.meta['dirty'] = true;
      }
    },
    setActiveScene: (state, action) => {
      let id = action.payload;
      if(state.gameState){
        state.gameState.system.activeScene = id;
        state.gameState.meta['dirty'] = true;
      }
    },
    newScene: (state, action) => {
      const newScene = getDefaultScene(action.payload);
      if(newScene && state.gameState){
        state.gameState.system.scenes.push(newScene);
      }
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
        .addCase(getGameAsync.pending, (state) => {
            state.status = 'loading'
        })
        .addCase(getGameAsync.fulfilled, (state, action) => {
            state.gameState = action.payload;
            state.lastSave = Date.now();
            state.status = 'idle';
        });
        builder
        .addCase(upsertGameAsync.pending, (state) => {
                state.status = 'loading'
        })
        .addCase(upsertGameAsync.fulfilled, (state, action) => {
            if(action.payload){
              state.gameState = action.payload;
              if(state.gameState && state.gameState.meta){
                state.gameState.meta['dirty'] = false;
              }
            }
            state.status = 'idle';
        });
},
})

/* Types */
export interface GameSlice {
  gameState: GameState | null,
  autoSave: boolean,
  lastSave: number,
  status: 'idle' | 'loading' | 'failed'
}

export interface GameState {
  _id: any,
  name: string | String,
  description: string | String,
  system: GameStateSystem,
  meta: any
}

export interface GameStateSystem {
  activeScene: string | String,
  characters: Array<any>,
  scenes: Array<any>,
  opponents: Array<any>,
  personas: Array<any>,
  gms: Array<any>,
  tracks: Array<TrackType>
}