/* Core */
import { createSlice } from '@reduxjs/toolkit';

/* Instruments */
import { getRoomAsync, getRoomsAsync } from './thunks';

const initialState: RoomSlice = {
  games: [],
  rooms: [],
  active: null,
  roomState: null,
  status: 'idle'
}

export const roomSlice = createSlice({
  name: 'room',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setActiveRoom: (state, action) => {
      state.active = action.payload;
    },
    setLeaveRoom: (state, action) => {
      state.roomState = null;
      state.active = null;
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
        .addCase(getRoomsAsync.pending, (state) => {
            state.status = 'loading';
        })
        .addCase(getRoomsAsync.fulfilled, (state, action) => {
            state.rooms = action.payload;
            state.status = 'idle';
        })
    builder
        .addCase(getRoomAsync.pending, (state) => {
            state.status = 'loading';
        })
        .addCase(getRoomAsync.fulfilled, (state, action) => {
            state.roomState = action.payload;
            state.status = 'idle';
        })
  },
})

/* Types */
export interface RoomSlice {
  games: any,
  rooms: any,
  active: any,
  roomState: any,
  status: 'idle' | 'loading' | 'failed'
}
